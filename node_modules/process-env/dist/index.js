'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProcessEnv = undefined;

var _fs = require('fs');

class ProcessEnv {
  get mainPath() {
    return require.main.paths[0];
  }

  get envFile() {
    return this.mainPath.replace(/(.*)\/.+/, '$1/.env');
  }

  autoload() {
    if ((0, _fs.existsSync)(this.envFile)) {
      this.load(this.envFile);
    }
    return this;
  }

  load(file) {
    let overwrite = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    const data = (0, _fs.readFileSync)(file, 'utf8');
    data.split('\n').forEach(line => {
      var _line$split = line.split(/=|\s/);

      var _line$split2 = _slicedToArray(_line$split, 2);

      const key = _line$split2[0];
      const value = _line$split2[1];

      this.set(key, value, overwrite);
    });
  }

  all() {
    const env = {};
    for (let prop in process.env) {
      if (process.env.hasOwnProperty(prop)) {
        env[prop.toLowerCase()] = process.env[prop];
      }
    }
    return env;
  }

  get(key) {
    let defaultVal = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    key = key.toUpperCase();
    if (process.env.hasOwnProperty(key)) {
      return process.env[key];
    }
    return defaultVal;
  }

  set(key, value) {
    let overwrite = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    if (!overwrite && this.get(key)) {
      throw Error('process.env.' + key + ' already exists.');
    }
    process.env[key.toUpperCase()] = value;
    return this.get(key);
  }

  delete(key) {
    delete process.env[key.toUpperCase()];
    return true;
  }
}

exports.ProcessEnv = ProcessEnv;
exports.default = new ProcessEnv().autoload();